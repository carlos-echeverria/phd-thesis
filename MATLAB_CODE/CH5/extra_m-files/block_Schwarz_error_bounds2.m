function [ e_boundT12, e_boundT21 ] = block_Schwarz_error_bounds2(EQparams, MESHparams, SOLUTIONparams )
%BLOCK_SCHWARZ_ERROR_BOUNDS computes the error generated by the 
% multiplicative Schwarz method at each iteration as well as the error 
% bounds to the Schwarz iterations.
%
%   function call:
%
% [e_boundT12, a_boundT21] = ...
%           block_Schwarz_error_bounds2(EQparams,MESHparams,SOLUTIONparams)
%
%   input: 
%
%        EQparams:
%      MESHparams:
%  SOLUTIONparams:
%
%   output:
%
%      e_boundT12: values of the theoretical error bound for T=Q2Q1.                
%      e_boundT21: values of the theoretical error bound for T=Q1Q2.
%
%
% Written by Carlos Echeverria on January 19, 2019
% Last Edited by C. E. on January 28, 2019.

 
%%  Define needed entries of the matrix 

 eH = abs(-EQparams.epsi/MESHparams.Hy^2);
 dH = abs((-EQparams.epsi/MESHparams.Hy^2)-(EQparams.wy/MESHparams.Hy));

 eh = abs(-EQparams.epsi/MESHparams.hy^2);
 dh = abs((-EQparams.epsi/MESHparams.hy^2)-(EQparams.wy/MESHparams.hy));


%%  Calculate needed quantities and convergence factor for Theorem 3.6
%   (numbering of version 18.01.19 of manuscript)

if EQparams.problem == 1
    
        % eta_h_inf_min = (dh*norm(inv(Ah),Inf))/(1-(eh*norm(inv(Ah),Inf)));
        eta_h_inf_min = 1;

        % eta_H_inf_min = (eH*norm(inv(AH),Inf))/(1-(eH*norm(inv(AH),Inf)));   
        eta_H_inf_min = eH/dH;  

        % conv_factor1 = eta_h_inf_min*eta_H_inf_min;
        conv_factor1 = eH/dH;


        % norm_T12_inf = eta_H_inf_min;
        norm_T12_inf = eH/dH;


        % norm_T21_inf = eta_h_inf_min;
        norm_T21_inf = 1;

elseif EQparams.problem == 2
    
        l1 = 4-2*cos(pi/(MESHparams.m)); % largest eigenvalue of T=tridiag(-1,2,-1)
        %l1 = 2;
        
        eta_h_inf_min = 1/(l1-1);

        eta_H_inf_min = 1/(l1-1);

        conv_factor1 = (1/(l1^2-l1-1))^2;

         norm_T12_inf = 1/l1;
        %norm_T12_inf = 0.5; 

         norm_T21_inf = 1/l1;
        %norm_T21_inf = 0.5; 

end

%%  Calculate bounds of Theorem 3.6
%   (numbering of version 18.01.19 of manuscript)


% bounds for T12 (vectorized):
iter=1:length(SOLUTIONparams.err_s1)-2;
e_boundT12 =[1, norm_T12_inf, (conv_factor1.^iter)*norm_T12_inf ];


% bounds for T21 (vectorized):
iter=1:length(SOLUTIONparams.err_s2)-2;
e_boundT21 =[1, norm_T21_inf, conv_factor1.^iter*norm_T21_inf ]; % T21



end